from BanditAlgorithm import BanditAlgorithm

class ExploreThenExploit(BanditAlgorithm):
  @staticmethod
  def shorthand():
    return 'EE'

  # explorationSteps: an int, the number of steps to first explore (by picking arms randomly).
  # i don't implement this as a fraction, since the bandit algorithm doesn't know how many times
  # it will be picked (by the agents) to run. it is important that explorationSteps >= K (# of arms)
  # so that each arm will be explored at least once
  def __init__(self, banditProblemInstance, priors, distr='beta', explorationSteps=100):
    super(ExploreThenExploit, self).__init__(banditProblemInstance, priors, distr)
    self.explorationSteps = explorationSteps
    

  def pickAnArm(self, t):
    if self.n < self.explorationSteps:
      # explore by picking an arm uniformly
      return self.n % self.banditProblemInstance.K
    else:
      # pick the arm that has done the best
      bestArm = 0
      bestArmAverage = 0 # the average reward of the best arm
      for arm in range(self.banditProblemInstance.K):
        armAverageReward = self.rewardTotal[arm] / self.armCounts[arm]
        if armAverageReward > bestArmAverage:
          bestArm = arm
          bestArmAverage = armAverageReward
      return bestArm
